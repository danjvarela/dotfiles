##########################################################################################
# ZSH Settings
##########################################################################################

export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="gnzh"

# Auto update in 30 days
zstyle ':omz:update' frequency 30

# Red dots while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Plugins
plugins=(git tmux sudo rails zsh-autosuggestions zsh-syntax-highlighting)

# Oh my zsh
source $ZSH/oh-my-zsh.sh

##########################################################################################
# Various stuff to be sourced
##########################################################################################

# asdf
. /usr/local/opt/asdf/libexec/asdf.sh
# append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# Persist wal colorscheme on reboot
(cat ~/.cache/wal/sequences &)

##########################################################################################
# Paths and Env variables
##########################################################################################

# Local Binaries
export PATH="${PATH}:${HOME}/.local/bin"

# Python
export PATH="${PATH}:${HOME}/Library/Python/3.8/bin"
export PATH="${PATH}:${HOME}/Library/Python/3.9/bin"

# Other env variables

# default editor
# export EDITOR=nvim
export EDITOR=lvim

# Project directory
export PROJECTS="${HOME}/Documents/Projects/Programming"

# Dotfiles
export DOTFILES="${HOME}/.local/share/chezmoi"

# nnn
export NNN_PLUG="j:autojump"

# Locale
export LANG=en_US.UTF-8

##########################################################################################
# Aliases and keybindings
##########################################################################################
alias cl="clear"
alias lg="lazygit"
alias dev="cd ${PROJECTS}"
alias sz="source ~/.zshrc; echo 'Reloaded zsh'"
alias be="bundle exec"
alias rails-ide="tmux split-window -v -p 20; tmux split-window -h -p 40"
alias config="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME"
alias ch="chezmoi"
alias cdot="cd ${DOTFILES}"
alias nvim="lvim"

# Accept auto suggestion using control-space
bindkey '^ ' autosuggest-accept

# initialise completions
autoload -Uz compinit
compinit

##########################################################################################
# FZF functions
##########################################################################################

# Install one or more versions of specified language
# e.g. `vmi rust` # => fzf multimode, tab to mark, enter to install
# if no plugin is supplied (e.g. `vmi<CR>`), fzf will list them for you
# Mnemonic [V]ersion [M]anager [I]nstall
vmi() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin-list | fzf)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list-all $lang | fzf --tac --no-sort --multi)
    if [[ $versions ]]; then
      for version in $(echo $versions);
      do; asdf install $lang $version; done;
    fi
  fi
}

# Remove one or more versions of specified language
# e.g. `vmi rust` # => fzf multimode, tab to mark, enter to remove
# if no plugin is supplied (e.g. `vmi<CR>`), fzf will list them for you
# Mnemonic [V]ersion [M]anager [C]lean
vmc() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin-list | fzf)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list $lang | fzf -m)
    if [[ $versions ]]; then
      for version in $(echo $versions);
      do; asdf uninstall $lang $version; done;
    fi
  fi
}

wt() {
  # See: https://github.com/Kharacternyk/fzwal
  # Lists dark themes by default.
  # Light themes are listed if an argument is passed.
  # Export FZWAL_RESET_CURSOR=1 if you don't want Pywal to change
  # the default behaviour of the terminal cursor (inverse fg and bg).

  cp -f ~/.cache/wal/colors.json /tmp/fzwal-backup.json

  if [ -n "$1" ]; then
    IS_LIGHT=TRUE
    THEME=$(wal --theme |
            sed '1,/Light Themes/d;/Extra/,$d' |
            sed -e '/^\S/d' -e 's/ - //' |
            fzf --preview='wal -qetl --theme {} && wal --preview')
  else
    THEME=$(wal --theme |
            sed '/Light Themes/,$d' |
            sed -e '/^\S/d' -e 's/ - //' |
            fzf --preview='wal -qet --theme {} && wal --preview')
  fi


  if [ -n "$THEME" ]; then
    if [ -n "$IS_LIGHT" ]; then
        wal -ql --theme $THEME
    else
        wal -q --theme $THEME
    fi
  else
    wal -q --theme /tmp/fzwal-backup.json
  fi

  if [ -n "$FZWAL_RESET_CURSOR" ]; then
    for TTY in /dev/pts/*; do
        [ -w $TTY ] && /bin/printf "\e]112\a" > $TTY
    done
    exit 0
  fi
}

nvp() {
  # Searches for all my project directory and open it with neovim
  DIR=`fd --type d --max-depth 1 . ${PROJECTS} | fzf-tmux` && cd "$DIR"
  nvim .
}

cdp() {
  DIR=`fd --type d --max-depth 1 . ${PROJECTS} | fzf-tmux` && cd "$DIR"
}

tmp() {
  DIR=`fd --type d --max-depth 1 . ${PROJECTS} | fzf-tmux` && cd "$DIR"
  tmux new
}

nvdot() {
  # Searches for files in my dotfiles and open it via neovim
  FILE=`git --git-dir=$HOME/.local/share/chezmoi/.git ls-tree --full-tree --name-only -r HEAD | fzf-tmux` && cd "$DOTFILES/$FILE"
  nvim .
}

# nnn functions
n() {
  # Block nesting of nnn in subshells
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
      echo "nnn is already running"
      return
  fi

  # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
  # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
  # see. To cd on quit only on ^G, remove the "export" and make sure not to
  # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
  #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

  # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
  # stty start undef
  # stty stop undef
  # stty lwrap undef
  # stty lnext undef

  nnn "$@"

  if [ -f "$NNN_TMPFILE" ]; then
          . "$NNN_TMPFILE"
          rm -f "$NNN_TMPFILE" > /dev/null
  fi
}
